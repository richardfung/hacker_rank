class Node:
    neighbors = set()

class Graph:
    nodes = []

def convert_to_graph(int_list):
    #label nodes
    graph = Graph()
    #Add nodes from beginning
    i = 0
    while i < 64:
        node = Node()
        graph.nodes.append(node)
        i += 1

    i = 0
    #for every given number
    while i < len(int_list):
        ones = set()
        bit_pos = 0
        #add all neighbors
        while bit_pos < 64:
            if (int_list[i] >> bit_pos) & 1 > 0:
                ones.add(bit_pos)
            bit_pos += 1
        #print ones
        #Add the neighbors to nodes in graph
        for pos in ones:
            neighbors = set(ones)
            neighbors.remove(pos)
            graph.nodes[pos].neighbors = \
                graph.nodes[pos].neighbors.union(neighbors)
        print graph.nodes[0].neighbors
        i += 1
    

    #for node in graph.nodes:
        #print node.neighbors        

    print "__________"
        

convert_to_graph([3])
convert_to_graph([3,12])
